// Code generated by MockGen. DO NOT EDIT.
// Source: db.go

// Package mock_database is a generated GoMock package.
package mock_database

import (
	reflect "reflect"
	model "youtube_service/model"

	gomock "github.com/golang/mock/gomock"
)

// MockDatabase is a mock of Database interface.
type MockDatabase struct {
	ctrl     *gomock.Controller
	recorder *MockDatabaseMockRecorder
}

// MockDatabaseMockRecorder is the mock recorder for MockDatabase.
type MockDatabaseMockRecorder struct {
	mock *MockDatabase
}

// NewMockDatabase creates a new mock instance.
func NewMockDatabase(ctrl *gomock.Controller) *MockDatabase {
	mock := &MockDatabase{ctrl: ctrl}
	mock.recorder = &MockDatabaseMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockDatabase) EXPECT() *MockDatabaseMockRecorder {
	return m.recorder
}

// CheckDBHealth mocks base method.
func (m *MockDatabase) CheckDBHealth() bool {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CheckDBHealth")
	ret0, _ := ret[0].(bool)
	return ret0
}

// CheckDBHealth indicates an expected call of CheckDBHealth.
func (mr *MockDatabaseMockRecorder) CheckDBHealth() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CheckDBHealth", reflect.TypeOf((*MockDatabase)(nil).CheckDBHealth))
}

// GetScore mocks base method.
func (m *MockDatabase) GetScore(member string) (float64, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetScore", member)
	ret0, _ := ret[0].(float64)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetScore indicates an expected call of GetScore.
func (mr *MockDatabaseMockRecorder) GetScore(member interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetScore", reflect.TypeOf((*MockDatabase)(nil).GetScore), member)
}

// GetSortedRecords mocks base method.
func (m *MockDatabase) GetSortedRecords(n int, ifLifeTime bool) ([]model.ResultRedis, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "GetSortedRecords", n, ifLifeTime)
	ret0, _ := ret[0].([]model.ResultRedis)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// GetSortedRecords indicates an expected call of GetSortedRecords.
func (mr *MockDatabaseMockRecorder) GetSortedRecords(n, ifLifeTime interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "GetSortedRecords", reflect.TypeOf((*MockDatabase)(nil).GetSortedRecords), n, ifLifeTime)
}

// IncreaseScore mocks base method.
func (m *MockDatabase) IncreaseScore(videoName string, increaseBy float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "IncreaseScore", videoName, increaseBy)
	ret0, _ := ret[0].(error)
	return ret0
}

// IncreaseScore indicates an expected call of IncreaseScore.
func (mr *MockDatabaseMockRecorder) IncreaseScore(videoName, increaseBy interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncreaseScore", reflect.TypeOf((*MockDatabase)(nil).IncreaseScore), videoName, increaseBy)
}

// Set mocks base method.
func (m *MockDatabase) Set(member string, score float64) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Set", member, score)
	ret0, _ := ret[0].(error)
	return ret0
}

// Set indicates an expected call of Set.
func (mr *MockDatabaseMockRecorder) Set(member, score interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Set", reflect.TypeOf((*MockDatabase)(nil).Set), member, score)
}
